<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <link rel="stylesheet" href="../style.css">
  <!-- jQuery CDN -->
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"
    integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
</head>
<body>
  <div class="wrapper">
    <h1>DB에서 받은 데이터</h1>
    <% for (let i = 0; i < posts.length; i++) { %>
      <div class="info-box">
        <div>
          <p><%= posts[i]._id %></p>
          <p>ID : <%= posts[i].아이디 %> </p>
          <p>PW : <%= posts[i].비밀번호 %> </p>
        </div>
        <button type="button" class="delete" data-id="<%= posts[i]._id %>">삭제</button>
      </div>
    <% } %>
  </div>

  <script>
    // 글 목록마다 삭제버튼 생성
    // Ajax로 삭제 요청하기 (Delete 요청)
    // html 상에서는 get, post 요청밖에 할 수 없다.

    // 1. method-override 라이브러리 사용 (form에서 delete 요청 가능)
    // 2. Javascript Ajax 요청 사용 (Ajax 많이 사용)

    // Ajax : 서버랑 통신 할 수 있게 도와주는 JS 문법 (서버에 요청)
    // 장점 : 새로고침 없이 서버에 요청할 수 있다.

    // jQuery를 이용해서 요청
    $('.delete').on('click', function(e){
      // 눌린 버튼의 해당 데이터가 삭제 되어야한다.
      let dataNum = e.target; //클릭한 요소의 DOM 요소
      let curClick = $(this); // 지금 이벤트가 동작하는 곳
      console.log(dataNum)
      console.log(curClick)

      $.ajax({
        // method : 'DELETE', 서버에 새로고침없이 delete 요청 부탁
        // url : '요청 할 경로',
        // data : '요청과 함께 보낼 데이터'
        method : 'DELETE',
        url : '/delete',
        data : {_id : dataNum}

        // done = Ajax 요청이 성공 했을 때 실행할 코드(콜백함수)
        }).done(function(result){
          // 페이지를 강제로 새로고침
          // 삭제 버튼을 누른 데이터가 화면에 보이지 않게 처리
          console.log('성공했지롱');
          curClick.parent('.info-box').fadeOut();
        })
        // .fail(function(){
        //   // 요청 실패시 실행 할 코드
        //   console.log('실패..')
        // })
     })
  </script>
</body>
</html>
